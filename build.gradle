buildscript {
	ext {
		springBootVersion = '2.0.9.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
        maven {
		  url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("me.champeau.gradle:jmh-gradle-plugin:0.4.7")
		classpath("org.ajoberstar:grgit:1.1.0") //git info to support session metadata
	}
}

plugins {
	id 'com.google.cloud.tools.jib' version '1.0.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

apply plugin: 'me.champeau.gradle.jmh'

group = 'com.joshcummings'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('.'))

    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}

bootRun {
	systemProperty "jdk.xml.entityExpansionLimit", "0"
	jvmArgs = ["-javaagent:contrast.jar", "-Dcontrast.config.path=contrast_security.yaml", "-Dcontrast.application.session_metadata=branchName=${git.branch.getCurrent().getName()}"]
}

jib {
	from.image = 'tomcat:8.0.53-jre8-alpine'
	to.image = 'terracotta-bank:1.0'
	container.appRoot = '/usr/local/tomcat/webapps/ROOT'
	container.environment = [JAVA_OPTS : '-Xmx1G -Djdk.xml.entityExpansionLimit=0']
}

test {
	useTestNG()
	group = 'Verification'
	description = 'Runs functional tests'
	dependsOn 'jar'
	//Standard functional testing, no attacks included
	jvmArgs = ["-javaagent:${project.projectDir}/contrast.jar", "-Dcontrast.config.path=contrast_security.yaml", "-Dcontrast.server.environment=qa", "-Dcontrast.server.name=gradle"]
}

jmh {
	includeTests = true
	duplicateClassesStrategy = 'warn'
}


project.configurations {
	vulnerabilityTestCompile {
		extendsFrom testCompile
	}
	vulnerabilityTestRuntime {
		extendsFrom vulnerabilityTestCompile, testRuntime
	}
}

project.sourceSets {
	vulnerabilityTest {
		java.srcDir project.file('src/vulnerability-test/java')
		resources.srcDir project.file('src/vulnerability-test/resources')
		compileClasspath = project.sourceSets.main.output +
				project.sourceSets.test.output +
				project.configurations.vulnerabilityTestCompile
		runtimeClasspath = output + compileClasspath + project.configurations.vulnerabilityTestRuntime
	}
}

Task vulnerabilityTestTask = project.tasks.create("vulnerabilityTest", Test) {
	useTestNG()
	group = 'Verification'
	description = 'Runs vulnerability tests'
	dependsOn 'jar'
	testClassesDirs = project.sourceSets.vulnerabilityTest.output.classesDirs
	classpath = project.sourceSets.vulnerabilityTest.runtimeClasspath
	jvmArgs = ["-javaagent:contrast.jar","-Dcontrast.server.name=gradle", "-Dcontrast.env=qa"]
}

idea {
	module {
		testSourceDirs += project.sourceSets.jmh.java.srcDirs
		testSourceDirs += project.sourceSets.vulnerabilityTest.java.srcDirs
	}
}

ext['tomcat.version'] = '8.0.53'

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile('commons-collections:commons-collections:3.2.1')
	compile('org.hsqldb:hsqldb')
	compile('javax.mail:mail:1.4')
	compile('javax.servlet:jstl')
	compile('javax.xml.bind:jaxb-api:2.3.0')
	compile('org.apache.tomcat.embed:tomcat-embed-jasper')
	compile('xalan:xalan:2.7.1')
	compile('ch.qos.logback:logback-classic:1.2.3')
	compile('ch.qos.logback:logback-core:1.2.3')

	runtime("org.springframework.boot:spring-boot-properties-migrator")

	testCompile('org.springframework:spring-beans')
	testCompile('org.springframework:spring-context')
	testCompile('org.springframework:spring-core')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')

	testCompile('com.github.docker-java:docker-java:3.0.14')
	testCompile('com.github.mike10004:littleproxy:1.1.3socksmod1')
	testCompile('io.github.bonigarcia:webdrivermanager:2.2.1')
 	testCompile('org.mockito:mockito-core')
	testCompile('org.seleniumhq.selenium:selenium-api:3.14.0')
	testCompile('org.seleniumhq.selenium:selenium-remote-driver:3.14.0')
	testCompile('org.seleniumhq.selenium:selenium-firefox-driver:3.14.0')
	testCompile('org.seleniumhq.selenium:selenium-support:3.14.0')
	testCompile('org.testng:testng:6.14.3')
	testCompile('com.squareup.okhttp3:mockwebserver:3.14.0')

	jmh('org.openjdk.jmh:jmh-core:1.21')
	jmh('org.openjdk.jmh:jmh-generator-annprocess:1.21')
	jmh('org.apache.httpcomponents:httpclient:4.5')
}
